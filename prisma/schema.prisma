
generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum stripe_plan {
  FREE
  PREMIUM
}

enum razorpay_plan {
  FREE
  PRO
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  stripeCustomerId  String?
  plan   stripe_plan   @default(FREE)
  stripe_subscription StripeSubscription?
  razorpayPlan razorpay_plan  @default(FREE)

    razorpay_subscription RazorpaySubscription?
  @@unique([email])
  @@map("user")
}

model RazorpaySubscription {
  id  String @id @default(cuid())
  userId String @unique
  plan razorpay_plan
  razorpaySubscriptionId String?
  status String @default("active")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("razorpay_subscription")
}


model StripeSubscription {
  id  String @id @default(cuid())
  userId  String @unique
  plan  stripe_plan

  user  User  @relation(fields: [userId] , references: [id] , onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}
